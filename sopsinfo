#!/usr/bin/env python3

import sys
import json
import os
import subprocess


def main(sopsfile):
    fingerprints_in_sops_file = get_fingerprints_from_sopsfile(sopsfile)
    fingerprint_to_name = get_fingerprint_to_name_mapping()
    missing_fingerprints = []

    for fingerprint in fingerprints_in_sops_file:

        if fingerprint not in fingerprint_to_name:
            missing_fingerprints.append(fingerprint)
            continue

        person = ", ".join(fingerprint_to_name[fingerprint])
        print(f"ðŸ˜€  {fingerprint} -> {person}")

    if missing_fingerprints:
        print("")
    for missing_fingerprint in missing_fingerprints:
        print(f"ðŸ˜­ No identity information for fingerprint {missing_fingerprint}.")


def get_fingerprints_from_sopsfile(sopsfile):
    sopsfile = os.path.abspath(sopsfile)

    with open(sopsfile) as cf:
        data = json.load(cf)

    if "sops" not in data:
        sys.exit("File not encrypted with SOPS.")

    sops = data["sops"]
    if "pgp" not in sops:
        sys.exit("No key 'pgp' in .sops")

    pgp = sops["pgp"]
    return [x["fp"] for x in pgp]


def get_fingerprint_to_name_mapping():
    fingerprint_to_user_mapping = {}
    fingerprint = None

    def is_uid_line(line):
        return line.startswith("uid")

    def is_fingerprint_line(line):
        return line.startswith("fpr")

    def extract_fingerprint(line):
        return line.split(":")[9]

    def extract_user(line):
        return line.split(":")[9]

    gpg_command = [
        "gpg",
        "--list-public-keys",
        "--keyid-format",
        "long",
        "--with-colons",
    ]
    gpg_command_output = (
        subprocess.check_output(gpg_command).decode("UTF-8").splitlines()
    )

    for line in gpg_command_output:
        if is_fingerprint_line(line):
            fingerprint = extract_fingerprint(line)

        if is_uid_line(line):
            name = extract_user(line)
            if fingerprint is None:
                sys.exit(f"No fingerprint for {name}. Weird.")

            if fingerprint in fingerprint_to_user_mapping:
                fingerprint_to_user_mapping[fingerprint].append(name)
            else:
                fingerprint_to_user_mapping[fingerprint] = [name]

    return fingerprint_to_user_mapping


if __name__ == "__main__":

    if len(sys.argv) != 2:
        sys.exit("Usage: ./sopsinfo FILE")

    main(sys.argv[1])
